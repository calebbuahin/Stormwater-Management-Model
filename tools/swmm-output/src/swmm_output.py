# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _swmm_output
else:
    import _swmm_output

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SMO_flow_rate = _swmm_output.SMO_flow_rate
SMO_concentration = _swmm_output.SMO_concentration
SMO_subcatch = _swmm_output.SMO_subcatch
SMO_node = _swmm_output.SMO_node
SMO_link = _swmm_output.SMO_link
SMO_sys = _swmm_output.SMO_sys
SMO_reportStep = _swmm_output.SMO_reportStep
SMO_numPeriods = _swmm_output.SMO_numPeriods
SMO_rainfall_subcatch = _swmm_output.SMO_rainfall_subcatch
SMO_snow_depth_subcatch = _swmm_output.SMO_snow_depth_subcatch
SMO_evap_loss = _swmm_output.SMO_evap_loss
SMO_infil_loss = _swmm_output.SMO_infil_loss
SMO_runoff_rate = _swmm_output.SMO_runoff_rate
SMO_gwoutflow_rate = _swmm_output.SMO_gwoutflow_rate
SMO_gwtable_elev = _swmm_output.SMO_gwtable_elev
SMO_soil_moisture = _swmm_output.SMO_soil_moisture
SMO_pollutant_conc_subcatch = _swmm_output.SMO_pollutant_conc_subcatch
SMO_invert_depth = _swmm_output.SMO_invert_depth
SMO_hydraulic_head = _swmm_output.SMO_hydraulic_head
SMO_stored_ponded_volume = _swmm_output.SMO_stored_ponded_volume
SMO_lateral_inflow = _swmm_output.SMO_lateral_inflow
SMO_total_inflow = _swmm_output.SMO_total_inflow
SMO_flooding_losses = _swmm_output.SMO_flooding_losses
SMO_pollutant_conc_node = _swmm_output.SMO_pollutant_conc_node
SMO_flow_rate_link = _swmm_output.SMO_flow_rate_link
SMO_flow_depth = _swmm_output.SMO_flow_depth
SMO_flow_velocity = _swmm_output.SMO_flow_velocity
SMO_flow_volume = _swmm_output.SMO_flow_volume
SMO_capacity = _swmm_output.SMO_capacity
SMO_pollutant_conc_link = _swmm_output.SMO_pollutant_conc_link
SMO_air_temp = _swmm_output.SMO_air_temp
SMO_rainfall_system = _swmm_output.SMO_rainfall_system
SMO_snow_depth_system = _swmm_output.SMO_snow_depth_system
SMO_evap_infil_loss = _swmm_output.SMO_evap_infil_loss
SMO_runoff_flow = _swmm_output.SMO_runoff_flow
SMO_dry_weather_inflow = _swmm_output.SMO_dry_weather_inflow
SMO_groundwater_inflow = _swmm_output.SMO_groundwater_inflow
SMO_RDII_inflow = _swmm_output.SMO_RDII_inflow
SMO_direct_inflow = _swmm_output.SMO_direct_inflow
SMO_total_lateral_inflow = _swmm_output.SMO_total_lateral_inflow
SMO_flood_losses = _swmm_output.SMO_flood_losses
SMO_outfall_flows = _swmm_output.SMO_outfall_flows
SMO_volume_stored = _swmm_output.SMO_volume_stored
SMO_evap_rate = _swmm_output.SMO_evap_rate

def smo_open(p_handle: 'SMO_Handle', path: 'char const *') -> "int":
    return _swmm_output.smo_open(p_handle, path)

def smo_get_version(p_handle: 'SMO_Handle') -> "int *":
    return _swmm_output.smo_get_version(p_handle)

def smo_get_project_size(p_handle: 'SMO_Handle') -> "int *":
    return _swmm_output.smo_get_project_size(p_handle)

def smo_get_flow_units(p_handle: 'SMO_Handle') -> "int *":
    return _swmm_output.smo_get_flow_units(p_handle)

def smo_get_pollutant_units(p_handle: 'SMO_Handle') -> "int *":
    return _swmm_output.smo_get_pollutant_units(p_handle)

def smo_get_start_date(p_handle: 'SMO_Handle') -> "double *":
    return _swmm_output.smo_get_start_date(p_handle)

def smo_get_times(p_handle: 'SMO_Handle', code: 'SMO_time') -> "int *":
    return _swmm_output.smo_get_times(p_handle, code)

def smo_get_element_name(p_handle: 'SMO_Handle', type: 'SMO_elementType', element_index: 'int') -> "int *":
    return _swmm_output.smo_get_element_name(p_handle, type, element_index)

def smo_get_subcatch_series(p_handle: 'SMO_Handle', subcatch_index: 'int', attr: 'SMO_subcatchAttribute', start_period: 'int', end_period: 'int') -> "int *":
    return _swmm_output.smo_get_subcatch_series(p_handle, subcatch_index, attr, start_period, end_period)

def smo_get_node_series(p_handle: 'SMO_Handle', node_index: 'int', attr: 'SMO_nodeAttribute', start_period: 'int', end_period: 'int') -> "int *":
    return _swmm_output.smo_get_node_series(p_handle, node_index, attr, start_period, end_period)

def smo_get_link_series(p_handle: 'SMO_Handle', link_index: 'int', attr: 'SMO_linkAttribute', start_period: 'int', end_period: 'int') -> "int *":
    return _swmm_output.smo_get_link_series(p_handle, link_index, attr, start_period, end_period)

def smo_get_system_series(p_handle: 'SMO_Handle', attr: 'SMO_systemAttribute', start_period: 'int', end_period: 'int') -> "int *":
    return _swmm_output.smo_get_system_series(p_handle, attr, start_period, end_period)

def smo_get_subcatch_attribute(p_handle: 'SMO_Handle', time_index: 'int', attr: 'SMO_subcatchAttribute') -> "int *":
    return _swmm_output.smo_get_subcatch_attribute(p_handle, time_index, attr)

def smo_get_node_attribute(p_handle: 'SMO_Handle', time_index: 'int', attr: 'SMO_nodeAttribute') -> "int *":
    return _swmm_output.smo_get_node_attribute(p_handle, time_index, attr)

def smo_get_link_attribute(p_handle: 'SMO_Handle', time_index: 'int', attr: 'SMO_linkAttribute') -> "int *":
    return _swmm_output.smo_get_link_attribute(p_handle, time_index, attr)

def smo_get_system_attribute(p_handle: 'SMO_Handle', time_index: 'int', attr: 'SMO_systemAttribute') -> "int *":
    return _swmm_output.smo_get_system_attribute(p_handle, time_index, attr)

def smo_get_subcatch_result(p_handle: 'SMO_Handle', time_index: 'int', subcatch_index: 'int') -> "int *":
    return _swmm_output.smo_get_subcatch_result(p_handle, time_index, subcatch_index)

def smo_get_node_result(p_handle: 'SMO_Handle', time_index: 'int', node_index: 'int') -> "int *":
    return _swmm_output.smo_get_node_result(p_handle, time_index, node_index)

def smo_get_link_result(p_handle: 'SMO_Handle', time_index: 'int', link_index: 'int') -> "int *":
    return _swmm_output.smo_get_link_result(p_handle, time_index, link_index)

def smo_get_system_result(p_handle: 'SMO_Handle', time_index: 'int', dummy_index: 'int') -> "int *":
    return _swmm_output.smo_get_system_result(p_handle, time_index, dummy_index)

def smo_init() -> "SMO_Handle *":
    return _swmm_output.smo_init()

def smo_close() -> "SMO_Handle *":
    return _swmm_output.smo_close()

def smo_free(array: 'void **') -> "void":
    return _swmm_output.smo_free(array)

def smo_clear_error(p_handle: 'SMO_Handle') -> "void":
    return _swmm_output.smo_clear_error(p_handle)

def smo_check_error(p_handle: 'SMO_Handle', msg_buffer: 'char **') -> "int":
    return _swmm_output.smo_check_error(p_handle, msg_buffer)

import enum

class Unit(enum.Enum):
    FLOW_UNIT = SMO_flow_rate
    CONC_UNIT = SMO_concentration

class ElementType(enum.Enum):
    SUBCATCH = SMO_subcatch
    NODE = SMO_node
    LINK = SMO_link
    SYSTEM = SMO_sys

class Time(enum.Enum):
    REPORT_STEP = SMO_reportStep
    NUM_PERIODS = SMO_numPeriods

class SubcatchAttribute(enum.Enum):
    RAINFALL = SMO_rainfall_subcatch
    SNOW_DEPTH = SMO_snow_depth_subcatch
    EVAP_LOSS = SMO_evap_loss
    INFIL_LOSS = SMO_infil_loss
    RUNOFF_RATE = SMO_runoff_rate
    GWOUTFLOW_RATE = SMO_gwoutflow_rate
    GETABLE_ELEV = SMO_gwtable_elev
    SOIL_MOISTURE = SMO_soil_moisture
    POLLUT_CONC = SMO_pollutant_conc_subcatch

class NodeAttribute(enum.Enum):
    INVERT_DEPTH = SMO_invert_depth
    HYDRAULIC_HEAD = SMO_hydraulic_head
    PONDED_VOLUME = SMO_stored_ponded_volume
    LATERAL_INFLOW = SMO_lateral_inflow
    TOTAL_INFLOW = SMO_total_inflow
    FLOODING_LOSSES = SMO_flooding_losses
    POLLUT_CONC = SMO_pollutant_conc_node

class LinkAttribute(enum.Enum):
    FLOW_RATE = SMO_flow_rate_link
    FLOW_DEPTH = SMO_flow_depth
    FLOW_VELOCITY = SMO_flow_velocity
    FLOW_VOLUME = SMO_flow_volume
    CAPACITY = SMO_capacity
    POLLUT_CONC = SMO_pollutant_conc_link

class SystemAttribute(enum.Enum):
    AIR_TEMP = SMO_air_temp
    RAINFALL = SMO_rainfall_system
    SNOW_DEPTH = SMO_snow_depth_system
    EVAP_INFIL_LOSS = SMO_evap_infil_loss
    RUNOFF_FLOW = SMO_runoff_flow
    DRY_WEATHER_INFLOW = SMO_dry_weather_inflow
    GW_INFLOW = SMO_groundwater_inflow
    RDII_INFLOW = SMO_RDII_inflow
    DIRECT_INFLOW = SMO_direct_inflow
    TOTAL_LATERAL_INFLOW = SMO_total_lateral_inflow
    FLOOD_LOSSES = SMO_flood_losses
    OUTFALL_FLOWS = SMO_outfall_flows
    VOLUME_STORED = SMO_volume_stored
    EVAP_RATE = SMO_evap_rate




